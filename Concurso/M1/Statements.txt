File compression is an extremely important problem in computer science. With the release of Xbox One, purchasing and downloading entirely digital games has become a much larger market. However, this new market brings a new host of problems to solve. As you can imagine, having millions of users downloading 50GB games can put a very large strain on networking systems. Because of this, large files are often compressed to a much more manageable size, downloaded, and then uncompressed into the original file. This process can save huge amounts of bandwidth. It also allows the user to download and install the game much faster.

One common form of compression is called run-length encoding. Run-length encoding of text is the process of reducing repeated characters to a smaller, multiple-based representation. For example:

Initial String

eeeeeeeeeeeeeeeeeeejjjghfuuuuuuiiiiiiiiiccc

Run-length encoded string

19e3jghf6u9i3c

The run-length encoded string is less than half the size of the initial string, but contains the same amount of information. This is an example of lossless compression.

Input description/format

Write a program to perform run-length encoding of given strings. The first line of the input file will be a positive integer, N, corresponding to the number of input strings in the file. The next N lines will each contain a string (one per line) to be run-length encoded.

Output description/format

Your output should consist of the number N, followed by a newline, and then the N run-length encoded strings, one per line.

Example input

6
uuuhiullllMMMMMMMMMNNddd
abcdefghijk
WWWWWWWWWWWWWWW
vvVVvvVV
bbbbsampleoutputooooooooooPPP
bbleeu
Example output

6
3uhiu4l9M2N3d
abcdefghijk
15W
2v2V2v2V
4bsampleoutput10o3P
2bl2eu





You are writing a function that will output a paging control that shows up on a webpage. The paging control can be used later to change pages by clicking on them.
At the moment, we only need to generate which pages we need to display.
Input description/format

An input line is composed of the following: 
C,L,X 
Where C, L, and X are integers. C is the current page, L is the last page, and X is the value for the rolling page.

Output description/format

A line of the output is composed of the following: 
First page
Ellipsis (if necessary)
Rolling pages
Ellipsis (if necessary)
Last page
All items are separated by a space
Ellipsis should be printed when there is a page gap between the previous and next item.
The rolling pages include X pages before the current page, the current page, and X pages after the current page
Pages should not be duplicated and cannot be out of bounds
The first page is always 1
In case of an error on the input, write ERR on the line
Example input

5,10,1
1,1,1
4,2,1
3,10,1
3,25,2
3,5,99
-1,5,4
10,10,1
5,10,0
Example output

1 ... 4 5 6 ... 10
1
ERR
1 2 3 4 ... 10
1 2 3 4 5 ... 25
1 2 3 4 5
ERR
1 ... 9 10
1 ... 5 ... 10










Your new Robot Overlords have declared that fleshlings’ use of multiple representations for phone numbers is inefficient and will no longer be tolerated.

You have been selected to transition the current database of US phone numbers from its current inconsistent formatting to the new Overlord approved format: +11235550100.

Input description/format

The input will be multiple lines, each containing a suspected phone number. Phone numbers can be provided in any of the following common fleshling formats.

Phone number formats

Name	Examples
Area code in parenthesis	+1 (123) 555-0100
1 (123) 555-0100
(123) 555-0100
Period separation	+1.123.555.0100
1.123.555.0100
123.555.0100
Dash separation	+1-123-555-0100
1-123-555-0100
123-555-0100
Space separation	+1 123 555 0100
1 123 555 0100
123 555 0100
Vanity Formats

To make matters worse, vain fleshlings will sometimes represent phone numbers with words. These so-called vanity phone numbers start with 1 and the area code (i.e. 1-123-) but after that they will continue with a mix of letters (upper or lower case), numbers and dashes. They are restricted to using exactly 7 letters and numbers (following the 1 and area code), but dashes can be inserted at any point other than immediately after another dash. Fleshlings make things so complicated! 

For your convenience, a representation of a fleshling dialing pad is included below:

1
 	2
A B C	3
D E F
4
G H I	5
J K L	6
M N O
7
P Q R S	8
T U V	9
W X Y Z
*
0
#
Output description/format

A line for each line of input. If the input contained a recognized format, the output line should be that phone number in the Overlord approved format: +11235550100. If the line is not recognized, the output line should be Fleshling follow-up needed. If the input line is blank, the output line should also be blank.

Example input

1 (123) 555-0100
1 (123) 555-0100 X123
555-0100
1-123-4VANITY
Example output

+11235550100
Fleshling follow-up needed
Fleshling follow-up needed
+11234826489






This problem is motivated by a real tool developed by Microsoft for converting virtual machines from one format to another. The challenge is displaying the progress of various multi-threaded and nested operations during the overall conversion process in a summarized way. Each operation sends notifications, but the order of notifications is not guaranteed.

The format of ‘start’ and ‘end’ notifications is defined below. You have to process the notifications and generate an output, which will represent the summary of the operations completed so far in a chronological and nested fashion.

Clarifications

Each operation sends out a notification when it starts and when it ends, along with start time.
You need to create a chronological summary of operations from the given notification inputs.
Operations can be nested. One operation can start a sub-operation and so on.
The notifications can be out of order.
In case multiple operations at the same depth begin at the same time, the order of those operations in the output should be determined by the order of which operation’s first notification was received first. In other words, the notification order in the input should be used as a tiebreaker for operations at the same depth that start at the same time.
Sub-operations can start at a later time than the operation, but that doesn’t impact the start time of the parent operation.
Each operation has one message. Since we can get two notifications for each operation (one at the start, and one at the end), if the messages differ, you should ignore the message at the end. The inputs here don’t have a case where messages differ.
Input description/format

The input is one or more rows of comma-separated values. Each row represents one notification. The notification includes the operation's id, its parent operation's id, and its depth from the root. Operations with no parent operation will have a parent operation id of null. For simplicity, start time is represented by integer values.

operationId,parentOperationId,MessageToDisplay,depth,startTime,isFinished

Output description/format

The output should be a list of rows: each row should represent the progress of an operation based on input notifications. The rows are sorted chronologically at each depth. Sub operations should be displayed right after the operation.

[Index of operation] [Message to display] [<(in progress)> or <(done)>]

At each depth, indexing should start at 1. For a nested operation, it will contains the index of its ancestors followed by . all the way to its own index.

Example input

20D,null,Every day you may make progress,0,1,false
EC0,978,Every step may be fruitful,2,4,false
68B,20D,The path to our destination is not always a straight one,1,2,false
978,20D,We turn back,1,3,false
68B,20D,The path to our destination is not always a straight one,1,2,true
Example output

1 Every day you may make progress (in progress)
1.1 The path to our destination is not always a straight one (done)
1.2 We turn back (in progress)
1.2.1 Every step may be fruitful (in progress)